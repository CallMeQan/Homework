{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Setup codeplace":{
		"scope": "cpp",
		"prefix": "setupcode",
		"description": "Setup code place for CodeForce",
		"body": [
			"/*",
			"\tauthor: Qan",
			"*/",
			"#include <bits/stdc++.h>",
			"#include <vector>",
			"#define fi first",
			"#define se second",
			"#define pb push_back",
			"#define int long long",
			"#define PI 3.1459",
			"#define endl \"\\n\"",
			"#define pii pair<int,int>",
			"using namespace std;",
			"const int MOD = 1e9+7;",
			"const int N = 1e6 + 9;",
			"",
			"bool multiTestCases = false;",
			"",
			"int n;",
			"int a[N];",
			"",
			"void solve(){",
			"\t// Something goes here...",
			"\t$0",
			"}",
			"",
			"signed main(){",
			"\tios_base::sync_with_stdio(false);",
			"\tcin.tie(0);",
			"\tcout.tie(0);",
			"\tif (multiTestCases){",
			"\t\tint t; cin >> t;",
			"\t\twhile (t--) solve();",
			"\t} else solve();",
			"}",
		]
	},
	"Setup Segment Tree":{
		"scope": "cpp",
		"description": "Setup workspace for segment tree",
		"prefix": ["seg_setup", "segmenttree", "segmentree"],
		"body": [
			"/*",
			"\tauthor: Qan",
			"*/",
			"#include <bits/stdc++.h>",
			"#include <vector>",
			"#define N 100006",
			"#define fi first",
			"#define se second",
			"#define pb push_back",
			"#define int long long",
			"#define array vector",
			"#define PI 3.1459",
			"#define endl \"\\n\"",
			"using namespace std;",
			"using ull = unsigned int;",
			"using ld = long double;",
			"",
			"bool loopInput = false;",
			"",
			"int n;",
			"int a[4*N];",
			"int ST[4*N];",
			"",
			"void update(int id, int l, int r, int pos, int val){",
			"\tif (l > pos || r < pos) return;",
			"\tif (l == r){",
			"\t\t// Formular here...",
			"\t\t$0",
			"\t\treturn;",
			"\t}",
			"\tint mid = (l+r)/2;",
			"\tupdate(2*id, l, mid, pos, val);",
			"\tupdate(2*id + 1, mid + 1, r, pos, val);",
			"\t",
			"\t// Checker here",
			"\ta[id] = max(a[2*id], a[2*id+1]);",
			"}",
			"",
			"int get(int id, int l, int r, int u, int v){",
			"\tif (l > v || r < u) return -1e18;",
			"\tif (u <= l && r <= v) return a[id];",
			"\t",
			"\tint firstGet = get(2*id, l, (l+r)/2, u, v);",
			"\tint secondGet = get(2*id+1, (l+r)/2 + 1, r, u, v);",
			"\t// Remember to check condition...",
			"\treturn max(firstGet, secondGet);",
			"}",
			"",
			"void solve(){",
			"\t// Something goes here...",
			"\t$1",
			"}",
			"",
			"signed main(){",
			"\tios_base::sync_with_stdio(false);",
			"\tcin.tie(0);",
			"\tcout.tie(0);",
			"\tif (loopInput){",
			"\t\tint t; cin >> t;",
			"\t\twhile (t--) solve();",
			"\t} else solve();",
			"}",
		]
	}
}